map.gb <- gvisMap(points.gb, locationvar="latlon", tipvar="country",
options = list(showTip=T, showLine=F, enableScrollWheel=TRUE,
useMapTypeControl=T, width=1400,height=800))
plot(map.gb)
plot(map.gb)
print(map.gb)
plot(gbmap)
mypolygon <- drawPoly()  # click on the map to draw a polygon and press ESC when finished
summary(mypolygon)
writeOGR(locs.gb, dsn = "locsgb.kml", layer = "locs.gb", driver = "KML")
library(rgdal)
writeOGR(locs.gb, dsn = "locsgb.kml", layer = "locs.gb", driver = "KML")
newmap <- readOGR("locsgb.kml", layer = "locs.gb")
writePointsShape(locs.gb, "locsgb")
gb.shape <- readShapePoints("locsgb.shp")
plot(gb.shape)
library(sp)
summary(locs)
library(raster) #PARA GESTIONAR IMÁGENES RASTER. TAMBIÉN APORTA FUENTES A NIVEL DE PAÍS O DE TERRITORIOS SOBRE DIVISIÓN TERRITORIAL, CLIMA Y TOPOGRAFÍA
library(sp) #ANÁLISIS ESPACIAL
library(maps) #PARA GENERAR MAPAS, SOBRE TODO DE ESTADOS UNIDOS, AUNQUE TAMBIÉN MUNDIALES
library(mapdata) #BASE DE DATOS DE MAPAS EXTRA, QUE AÑADE ALGUNOS TEMAS
library(maptools) #PARA MANEJAR SHAPEFILES
library(rgdal) #PARA MANEJAR ARCHIVOS DE LA BIBLIOTECA GDAL (GEOSPATIAL DATA ABSTRACTION LIBRARY)
library(RgoogleMaps) #PARA GENERAR, EN VENTANA GRÁFICA DE R, MAPAS DE GOOGLE
library(plotGoogleMaps) #PARA GENERAR ARCHIVOS html CON LOS QUE SE VISUALIZAN OBJETOS ESPACIALES EN GOOGLEMAPS
library(plotKML) #VISUALIZACIÓN DE OBJETOS ESPACIALES Y ESPACIO-TEMPORAL DE OBJETOS EN GOOGLE EARTH
library(rworldmap) #PARA GENERAR MAPAS
library(gstat) #MODELIZACIÓN GEOESTADÍSTICA ESPACIAL Y ESPACIO-TEMPORAL, PREDICCIÓN Y SIMULACIÓN
library(geoR) #ANÁLISIS DE DATOS GEOESTADÍSTICOS
library(dismo) #PARA MODELIZAR DISTRIBUCIÓN DE ESPECIES. SE UTILIZARÁ SÓLO EL COMANDO gbif, PERO TIENE MUCHAS FUNCIONES INTERESANTES
library(googleVis)
plot(countriesLow)
country.laea<-spTransform(countriesLow,crs.laea)
library(sp)
country.laea<-spTransform(countriesLow,crs.laea)
library(rgdal)
country.laea<-spTransform(countriesLow,crs.laea)
crs.laea <- CRS("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs")  # Lambert Azimuthal Equal Area
locs.laea <- spTransform(locs, crs.laea)
country.laea<-spTransform(countriesLow,crs.laea)
plot(locs.laea, pch = 20, col = "steelblue")
plot(country.laea, add = T)
plot(locs.laea, pch = 20, col = "steelblue")
plot(country.laea, add = TRUE)
plot(locs.laea, pch = 20, col = "steelblue", xlim = c(1800000, 3900000), ylim = c(1e+06,
3e+06))
plot(country.laea, add = T)
plot(locs.laea, pch = 20, col = "steelblue", xlim = c(1800000, 3900000), ylim = c(1e+06,
3e+06))
plot(country.laea, add = TRUE)
tmin <- getData("worldclim", var = "tmin", res = 10)
tmin1 <- raster(paste(getwd(), "/wc10/tmin1.bil", sep = ""))
fromDisk(tmin1)
tmin1 <- tmin1/10  # Worldclim temperature data come in decimal degrees
tmin1
plot(tmin1)
library(gtools)
install.packages("gtools")
library(gtools)
file.remove(paste(getwd(),"/wc10/","tmin_10m_bil.zip",sep=""))
list.ras<-mixedsort(list.files(paste(getwd(),"/wc10/",sep=""),full.names = =TRUE,pattern=".bil"))
list.ras<-mixedsort(list.files(paste(getwd(),"/wc10/",sep=""),full.names = TRUE,pattern=".bil"))
list.ras
tmin.all<-stack(list.ras)
tmin.all
tmmin.all<-tmmin.all/10
tmin.all<-tmmin.all/10
tmin.all<-tmin.all/10
plot(tmin.all)
plot(tmin1)
plot(tmin12)
plot(tmin1)
tmin.brick<-brick(tmin.all)
plot(tmin1)
newext<-c(-10,10,30,50)
newext<-drawExtent()
tmin1.c<-crop(tmin1,newext)
plot(tmin1.c)
newext<-c(-10,10,30,50)
tmin1.c<-crop(tmin1,newext)
plot(tmin1.c)
crs.geo
projection(tmin1.c)
projection(tmin.all.c)
tmin.all.c <- crop(tmin.all, newext)
projection(tmin.all.c)
projection(tmin.all.c)<-crs.geo
projection(tmin1.c)<-crs.geo
tmin1.c
tmin1.proj <- projectRaster(tmin1.c, crs = "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +units=m +no_defs")  # can also use a template raster, see ?projectRaster
tmin1.proj
plot(tmin1.proj)
histogram(tmmin1.c)
hist(tmmin1.c)
histogram(tmmin1.c)
histogram(tmin1.c)
hist(tmin1.c)
pairs(tmin.all.c)
persp(tmin1.c)
contour(tmin1.c)
contourplot(tmin1.c)
contourplot(tmin1.c)
library(graphics)
contourplot(tmin1.c)
levelplot(tmin1.c)
bwplot(tmin.all.c)
library(lattice)
bwplot(tmin.all.c)
levelplot(tmin1.c)
contourplot(tmin1.c)
densityplot(tmin1.c)
Moran(tmin1.c)
tmin1.Moran<-MoranLocal(tmin1.c)
plot(tmin1.Moran)
head(locs)
projection(tmin1)<-crs.geo
locs$tmin1<-extract(tmin1,locs)
head(locs)
rm(list=ls())
rm(list=ls())
rm(ls=list()
)
rm(list = ls())
1:5
1:1
1:0
10:0
seq(1,20,.02)
x<-seq(1,20,.02)
plot(x)
seq(0,100,length.out = 20)
seq(0,100,length.out = 2)
seq(0,100,length.out = 50)
seq(0,10,length.out = 5)
rep(e,5)
rep(pi,5)
rep(exp,5)
rep(exp(1),5)
rep(exp(pi),5)
rep(exp(pi*i),5)
1+i
1+1i
e<-exp(1)
x<=e
x>e
x==e
any(x==e)
all(x==e)
x[1]
x[100]
length(x)
x[900]
x[9000]
is.na(x[9000])
names(x)
head(x)
head(x,5)
tail(x,40)
x[1:30]
x[15:30]
x[15:30,100:346]
x[15:30,100:101]
x[15:30,]
x[15:30,1]
x[15:30]
x[c(15:30,100:101)]
x[c(15:30,100:300)]
x[c(15:30,100:300,-16)]
x[-16]
x[x %%2 ==0]
seq_along(x)
y<-c("a","b","c","d")
for(letter in y){print(letter)}
unclass(x)
t<-as.Date("1970-01-01")
t
unclass(t)
unclass(as.Date("1970-01-01"))
unclass(as.Date("1970-01-02"))
unclass(as.Date("1970-01-03"))
unclass(as.Date("1970-01-31"))
unclass(as.Date("1970-02-01"))
unclass(as.Date("2015-11-12"))
submit()
corr<-function(directory,threshold=0){
table<-complete(directory,1:332)
mayores<-table[table$nobs>threshold,]
if(length(mayores$id)==0){
correlaciones<-numeric(0)
return(correlaciones)
break
}else{
correlaciones<-numeric(length(mayores$id))
archivos<-list.files(directory,full.names = TRUE,pattern = "*.csv")
for(i in 1:length(mayores$id)){
muestra<-read.csv(archivos[id[i]],header = TRUE)
correlaciones[i]<-cor(muestra$sulfate,muestra$nitrate,use = "na.or.complete")}
}
correlaciones
}
setwd("~/Data_mining_course/datasciencecourse")
corr("specdata")
complete<-function(directory, id=1:332){
archivos<-list.files(directory,full.names = TRUE)
#archivos<-list.files(pattern = "*.csv")
casos_completos<-numeric(length(id))
for(i in 1:length(id)){
muestra<-read.csv(archivos[id[i]],TRUE)
casos_completos[i]<-sum(complete.cases(muestra))
}
tabla<-data.frame(id=id,nobs=casos_completos)
#print(tabla)
return(tabla)
}
corr("specdata")
corr<-function(directory,threshold=0){
table<-complete(directory,id=1:332)
mayores<-table[table$nobs>threshold,]
if(length(mayores$id)==0){
correlaciones<-numeric(0)
return(correlaciones)
break
}else{
correlaciones<-numeric(length(mayores$id))
archivos<-list.files(directory,full.names = TRUE,pattern = "*.csv")
for(i in 1:length(mayores$id)){
muestra<-read.csv(archivos[id[i]],header = TRUE)
correlaciones[i]<-cor(muestra$sulfate,muestra$nitrate,use = "na.or.complete")}
}
correlaciones
}
corr<-function(directory,threshold=0){
table<-complete(directory,id=1:332)
mayores<-table[table$nobs>threshold,]
if(length(mayores$id)==0){
correlaciones<-numeric(0)
return(correlaciones)
break
}else{
correlaciones<-numeric(length(mayores$id))
archivos<-list.files(directory,full.names = TRUE,pattern = "*.csv")
for(i in 1:length(mayores$id)){
muestra<-read.csv(archivos[id[i]],header = TRUE)
correlaciones[i]<-cor(muestra$sulfate,muestra$nitrate,use = "na.or.complete")}
}
correlaciones
}
corr("specdata")
mayores
directory<-"specdata"
table<-complete(directory,id=1:332)
table
mayores<-table[table$nobs>threshold,]
threshold<-100
corr("specdata")
mayores
mayores<-table[table$nobs>threshold,]
mayores
corr("specdata",500)
if(length(mayores$id)==0){
correlaciones<-numeric(0)
return(correlaciones)
break
}else{
correlaciones<-numeric(length(mayores$id))
archivos<-list.files(directory,full.names = TRUE,pattern = "*.csv")
for(i in 1:length(mayores$id)){
muestra<-read.csv(archivos[id[i]],header = TRUE)
correlaciones[i]<-cor(muestra$sulfate,muestra$nitrate,use = "na.or.complete")}
}
archivos
archivos<-list.files(directory,pattern = "*.csv")
for(i in 1:length(mayores$id)){
muestra<-read.csv(archivos[id[i]],header = TRUE)
correlaciones[i]<-cor(muestra$sulfate,muestra$nitrate,use = "na.or.complete")}
mayores$id
mayores$nobs
threshold<-1000
mayores<-table[table$nobs>threshold,]
mayores$id
length(mayores$id)==0
corr("specdata",5000)
corr<-function(directory,threshold=0){
table<-complete(directory,id=1:332)
mayores<-table[table$nobs>threshold,]
files<-mayores$id
if(length(files)==0){
correlaciones<-numeric(0)
return(correlaciones)
break
}else{
correlaciones<-numeric(length(files))
archivos<-list.files(directory,full.names = TRUE,pattern = "*.csv")
for(i in 1:length(files)){
muestra<-read.csv(archivos[files[i]],header = TRUE)
correlaciones[i]<-cor(muestra$sulfate,muestra$nitrate,use = "na.or.complete")}
}
correlaciones
}
corr("specdata",1000)
cr<-corr("specdata",400)
head(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
cr<-corr("specdata",150)
head(cr)
summary(cr)
cr<-corr("specdata",5000)
summary(cr)
length(cr)
cr<-corr("specdata")
summary(cr)
setwd("~/Data_mining_course/datasciencecourse")
y<-rnorm(300,0,1)
makevector<-function(x=nnumeric()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmean<-function(mean) m<<-mean
getmean<-function() m
list(set=set,get=get,
setmean=setmean,
getmean=getmean)
}
cachemean<-function(x,...){
m<-x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data<-x$get()
m<-mean(data,...)
x$setmean(m)
m
}
cachemean(y)
class(y)
makevector(y)
z<-makevector(y)
z
y<-1:344
cachemean(y)
makevector<-function(x=nnumeric()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmean<-function(mean) m<<-mean
getmean<-function() m
list(set=set,get=get,
setmean=setmean,
getmean=getmean)
}
cachemean<-function(x,...){
m<-x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data<-x$get()
m<-mean(data,...)
x$setmean(m)
m
}
cachemean(y)
x
names(x)
cachemean(makevector(y))
cachemean(makevector(y))
y<-rnorm(300,0,1)
cachemean(makevector(y))
cachemean(makevector(rnorm(400,1,2.5)))
cachemean(makevector(rnorm(400,1,2.5)))
cachemean(makevector(rnorm(400,1,2.5)))
cachemean(makevector(rnorm(400,1,2.5)))
cachemean(makevector(rnorm(400,1,2.5)))
cachemean(makevector(rnorm(400,1,2.5)))
cachemean(makevector(rnorm(400,1,2.5)))
cachemean(makevector(y))
setwd("~/GitHub/ProgrammingAssignment2")
cachemean(makevector(y))
b<-makevector(y)
cachemean(b)
cachemean(b)
b$set(rnorm(300,2,3.45))
cachemean(b)
cachemean(b)
matriz<-matrix(3,3,1:9)
matriz
matriz<-matrix(nrow=3,ncol=3,1:9)
matriz
matriz(1:9,3,3)
matriz<-matrix(1:9,3,3)
matriz
zeta<-solve(matriz)
zeta<-solve(matriz,TRUE)
zeta<-solve(matriz)
matriz<-matrix(c(1,0,4,3,2,10,4,5,6),3,3)
zeta<-solve(matriz)
zeta
class(matriz)
z<-matrix()
z
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set_datos<-function(y){
x<<-y
m<<-NULL
}
get_datos<-function() x
setinv<-function(inversa) m<<-inversa
getinv<-function() m
list(set_datos=set_datos,
get_datos=get_datos,
setinv=setinv,
getinv=getinv)
}
s<-makeCacheMatrix(matriz)
s
s$set_datos()
s$get_datos()
s$getinv()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinv()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data<-x$get_datos()
m<-solve(x,...)
x$setinv(m)
m
}
cacheSolve(s)
s
cacheSolve(matriz)
cacheSolve(makeCacheMatrix(matriz))
matriz
cacheSolve(matriz)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set_datos<-function(y){
x<<-y
m<<-NULL
}
get_datos<-function() x
setinv<-function(inversa) m<<-inversa
getinv<-function() m
list(set_datos=set_datos,
get_datos=get_datos,
setinv=setinv,
getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinv()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data<-x$get_datos()
m<-solve(x,...)
x$setinv(m)
m
}
cacheSolve(makeCacheMatrix(matriz))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set_datos<-function(y){
x<<-y
m<<-NULL
}
get_datos<-function() x
setinv<-function(inversa) m<<-inversa
getinv<-function() m
list(set_datos=set_datos,
get_datos=get_datos,
setinv=setinv,
getinv=getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getinv()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data<-x$get_datos()
m<-solve(data,...)
x$setinv(m)
m
}
cacheSolve(makeCacheMatrix(matriz))
z<-makecachematrix(matriz)
z<-makeCacheMatrix(matriz)
cacheSolve(z)
cacheSolve(z)
